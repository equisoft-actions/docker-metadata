name: Resolve docker metadata
description: Resolve docker metadata such as tags and OCI labels.

inputs:
  title:
    description: Human-readable name of this image.
    required: true
  image-name:
    description: The image name, optionally prepended by a registry URL.
    required: true
  instance-size:
    description: The size of the runner instance (e.g., "large", "xlarge").
    required: false
    default: "large"
  platforms:
    description: Comma-separated list of platforms to build for (e.g., "linux/amd64,linux/arm64").
    required: false
    default: "linux/amd64,linux/arm64"
  release:
    description: Set to 'true' to treat this version as a release. 'version' must then be compatible with SemVer.
    required: false
    default: "false"
  use-self-hosted:
    description: Set to 'true' to use self-hosted runners instead of GitHub hosted runners.
    required: false
    default: "true"
  version:
    description: The version identifier.
    required: true

outputs:
  annotations:
    description: A line-separated list of OCI annotations to pass to the docker build command.
    value: ${{ steps.labels-metadata.outputs.annotations }}
  labels:
    description: A line-separated list of OCI labels to pass to the docker build command.
    value: ${{ steps.labels-metadata.outputs.labels }}
  tags:
    description: A comma-separated list of tags to pass to the docker build command.
    value: ${{ steps.tags-metadata.outputs.tags }}
  matrix-include:
    description: A JSON array of platforms to build for.
    value: ${{ steps.platforms.outputs.matrix-include }}
  runner-config:
    description: A JSON array of runner configurations to use for the build.
    value: ${{ steps.runners.outputs.runner-config }}

runs:
  using: composite
  steps:
    - name: Compute tags output
      id: tags-metadata
      shell: bash
      run: |
        DOCKER_IMAGE=${{ inputs.image-name }}
        RELEASE=${{ inputs.release }}
        VERSION=${{ inputs.version }}
        COMMIT_SHA=${{ github.sha }}
        REF_NAME_TAG=$(echo "${{ github.ref_name }}" | sed 's/[^a-zA-Z0-9]/-/g')

        if [ "$RELEASE" = "true" ]; then
          MINOR=${VERSION%.*}
          MAJOR=${MINOR%.*}
          TAGS="${DOCKER_IMAGE}:v${VERSION},${DOCKER_IMAGE}:version-${VERSION},${DOCKER_IMAGE}:${MINOR},${DOCKER_IMAGE}:${MAJOR},${DOCKER_IMAGE}:latest"
        else
          TAGS="${DOCKER_IMAGE}:${VERSION},${DOCKER_IMAGE}:edge"
          if [ "${{ github.event_name }}" = "push" ]; then
            TAGS="${TAGS},${DOCKER_IMAGE}:${REF_NAME_TAG}-${COMMIT_SHA:0:7}-$(date --utc +%Y%m%d%H%M%SZ)"
          fi
        fi

        echo "tags=${TAGS}" >> $GITHUB_OUTPUT

    - name: Compute annotations and labels output
      id: labels-metadata
      uses: actions/github-script@v7
      env:
        CONTAINER_TITLE: ${{ inputs.title }}
        CONTAINER_VERSION: ${{ inputs.version }}
      with:
        script: |
          const labels = [
            `org.opencontainers.image.title=${process.env.CONTAINER_TITLE}`,
            "org.opencontainers.image.description=${{ github.event.repository.description }}",
            "org.opencontainers.image.url=${{ github.event.repository.html_url }}",
            "org.opencontainers.image.source=${{ github.event.repository.html_url }}",
            `org.opencontainers.image.version=${process.env.CONTAINER_VERSION}`,
            `org.opencontainers.image.created=${new Date().toISOString()}`,
            "org.opencontainers.image.revision=${{ github.sha }}",
            "org.opencontainers.image.licenses=${{ github.event.repository.license.spdx_id }}",
          ];

          core.setOutput("annotations", labels.map((x) => `index-descriptor,manifest-descriptor,index,manifest:${x}`).join('\n'));
          core.setOutput("labels", labels.join('\n'));

    - name: Prepare platforms
      id: platforms
      shell: bash
      run: |
        platforms_input='${{ inputs.platforms }}'
        matrix_include='[]'
        
        for platform in $(echo "$platforms_input" | tr ',' ' '); do
          arch=$(echo "$platform" | cut -d'/' -f2)
          matrix_include=$(echo "$matrix_include" | jq --arg platform "$platform" --arg arch "$arch" '. + [{platform: $platform, arch: $arch}]')
        done
        
        echo "matrix-include=$matrix_include" >> $GITHUB_OUTPUT
        echo "Generated matrix: $matrix_include"

    - name: Prepare runner configuration
      shell: bash
      id: runners
      run: |
        if [[ "${{ inputs.use-self-hosted }}" == "true" ]]; then
          echo "Using self-hosted runners"
          runner_config='["self-hosted", "{0}-${{ inputs.instance-size }}"]'
        else
          echo "Using GitHub hosted runners"
          runner_config='"{0}-${{ inputs.instance-size }}"'
        fi
        echo "runner-config=$runner_config" >> $GITHUB_OUTPUT
        echo "Runner configuration template: $runner_config"
